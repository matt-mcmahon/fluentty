export default "# Include, then immediately export, environment variables in .env file.\n# These variables will be available to the Deno CLI.\ninclude .env\nexport\n\n# These settings can be safely disabled by setting the VARIABLE_NAME to nothing\n# in your deployment's .env file. For example, setting the following would\n# disable the local Deno cache in favor of Deno's global cache:\n#\n# DENO_DIR=\n#\nDENO_DIR               ?= .deno\nDENO_MAIN              ?= mod.ts\nIMPORT_MAP             ?=\nLOCK_FILE              ?= lock_file.json\nRUN_PERMISSIONS        ?=\nTEST_PERMISSIONS       ?= --allow-read=./source,. --allow-run\nUSE_CACHE              ?= --cached-only\nUSE_UNSTABLE           ?=\n\n# The default values for these settings are meant to be easily overwritten by\n# your project's .env file.\n#\n# Do NOT set these values to nothing.\n#\nDENO_BUNDLE_FILE       ?= mod.js\nDENO_DEPENDENCIES_FILE ?= dependencies.ts\nDENO_SOURCE_DIR        ?= source\nDENO_APP_DIR           ?= $(DENO_SOURCE_DIR)/app\nDENO_LIB_DIR           ?= $(DENO_SOURCE_DIR)/lib\n\nDENO_ABS               := $(PWD)/$(DENO_DIR)\n\nGEN_DIR                ?= /dev/null\n\nNPM                    ?= npm\nNPM_INSTALL            ?= $(NPM) install\nNPM_RUN                ?= $(NPM) run\nNPM_LINK               ?= $(NPM) link\nNPM_UNLINK             ?= $(NPM) unlink\n\nSOURCE_FILES           := $(shell find \"$(DENO_SOURCE_DIR)\" -type f -name \"*.ts\")\nLINT_FILES             := $(shell find \"$(DENO_SOURCE_DIR)\" -type f -name \"*.ts\" -not -name \"*.test.ts\")\nREMOTE_DIRS            := $(shell find $(shell ls .) -type d -name \"remote\")\nREMOTE_DEPENDENCIES    := $(shell find \"$(REMOTE_DIRS)\" -type f -name \"*.ts\")\n\nPLATFORMS              := $(shell find ./platform/         -maxdepth 1 -mindepth 1 -type d)\nINTEGRATIONS           := $(shell find ./integration-test/ -maxdepth 1 -mindepth 1 -type d)\n\nifneq ($(IMPORT_MAP),)\nIMPORT_MAP_OPTIONS     := --importmap $(IMPORT_MAP)\nUSE_UNSTABLE           := --unstable\nendif\n\nifneq ($(LOCK_FILE),)\nLOCK_OPTIONS           := --lock $(LOCK_FILE)\nLOCK_OPTIONS_WRITE     := --lock $(LOCK_FILE) --lock-write\nendif\n\ndefine NEWLINE\n\nendef\n\ndefine print_header\n\t@echo\n\t@echo $1\n\t@echo\nendef\n\nall: install lint build test-all\n\nifneq ($(PLATFORMS),)\n$(PLATFORMS):\n\t$(MAKE) DENO_DIR=$(DENO_ABS) -C $@ $(TARGET)\nendif\n\nifneq ($(INTEGRATIONS),)\n$(INTEGRATIONS):\n\t$(MAKE) DENO_DIR=$(DENO_ABS) -C $@ $(TARGET)\nendif\n\nifneq ($(LOCK_FILE),)\n$(LOCK_FILE): $(REMOTE_DEPENDENCIES) $(DENO_DEPENDENCIES_FILE)\n\t@read -p \\\n\t\t\"Dependencies have changed. Press [Enter] to update the cache and $(LOCK_FILE), or [Ctrl]+[C] to cancel:\" \\\n\t\tcancel\nifneq ($(RELOAD),)\n\t@echo \"Deleting $(DENO_DIR)...\"\n\trm -rf $(DENO_DIR)\nendif\n\tdeno cache --unstable \\\n\t\t$(RELOAD) \\\n\t\t$(RUN_PERMISSIONS) \\\n\t\t$(LOCK_OPTIONS_WRITE) \\\n\t\t$(IMPORT_MAP_OPTIONS) \\\n\t\t$(DENO_DEPENDENCIES_FILE)\nendif\n\nifneq ($(DENO_BUNDLE_FILE),)\n$(DENO_BUNDLE_FILE): $(LINT_FILES) scripts/makefiles\n\t@echo \"// deno-fmt-ignore-file\"   > $(DENO_BUNDLE_FILE)\n\t@echo \"// deno-lint-ignore-file\" >> $(DENO_BUNDLE_FILE)\n\t@echo \"// @ts-nocheck\"           >> $(DENO_BUNDLE_FILE)\n\tdeno bundle \\\n\t\t$(IMPORT_MAP_OPTIONS) \\\n\t\t$(USE_UNSTABLE) \\\n\t\t$(DENO_MAIN) \\\n\t\t>> $(DENO_BUNDLE_FILE)\nendif\n\nifneq ($(GEN_DIR),)\n$(GEN_DIR): $(SOURCE_FILES)\n\tmkdir -p $@\n\trsync -am --include=\"*.ts\" --delete-during \\\n\t\t$(DENO_APP_DIR)/ \\\n\t\t$@/\n\tfind $@ -type f -name \"*.ts\" -exec \\\n\t\tsed -i -E \"s/(from \\\"\\..+)(\\.d.ts)|(\\.ts)(\\\";?)/\\1\\4/g\" {} +\nendif\n\nifneq ($(DENO_DEPENDENCIES_FILE),)\n$(DENO_DEPENDENCIES_FILE): $(REMOTE_DEPENDENCIES)\n\t$(file > $(DENO_DEPENDENCIES_FILE),$(patsubst %,import \"./%\";,$(REMOTE_DEPENDENCIES)))\n\tdeno fmt $(DENO_DEPENDENCIES_FILE)\nendif\n\nbuild: .header(build) $(DENO_BUNDLE_FILE)\n\t$(MAKE) TARGET=$@ do-platform-action\n\t$(MAKE) TARGET=$@ do-integration-action\n\nclean: .header(clean)\n\t$(MAKE) DENO_DIR=$(DENO_ABS) -C scripts/makefiles clean\n\t$(MAKE) TARGET=$@ do-platform-action\n\t$(MAKE) TARGET=$@ do-integration-action\n\nconfigure: scripts/makefiles\n\t./configure\n\ndo-platform-action: $(PLATFORMS)\n\ndo-integration-action: $(INTEGRATIONS)\n\nfmt: format\n\nformat:\n\tdeno fmt $(DENO_SOURCE_DIR) $(DENO_LIB_DIR)\n\n.header(build):\n\t$(call print_header, Building...)\n\n.header(clean):\n\t$(call print_header, Cleaning...)\n\n.header(install):\n\t$(call print_header, Installing...)\n\n.header(test):\n\t$(call print_header, Testing...)\n\ninstall: .header(install) $(LOCK_FILE)\n\t$(MAKE) TARGET=$@ do-platform-action\n\t$(MAKE) TARGET=$@ do-integration-action\n\nlint:\n\tdeno fmt --check $(RUN_PERMISSIONS) $(DENO_SOURCE_DIR)\n\t-deno lint --unstable $(RUN_PERMISSIONS) $(LINT_FILES)\n\nlint-quiet:\n\tdeno fmt --quiet --check $(RUN_PERMISSIONS) $(DENO_SOURCE_DIR)\n\t-deno lint --quiet --unstable $(RUN_PERMISSIONS) $(LINT_FILES)\n\nrun:\n\tdeno run $(RUN_PERMISSIONS) $(DENO_MAIN)\n\nscripts/makefiles:\n\t$(MAKE) DENO_DIR=$(DENO_ABS) -C $@\n\ntest: .header(test) $(LOCK_FILE)\n\tdeno test --unstable --coverage \\\n\t\t$(TEST_PERMISSIONS) \\\n\t\t$(LOCK_OPTIONS) \\\n\t\t$(USE_CACHE) \\\n\t\t$(IMPORT_MAP_OPTIONS) \\\n\t\t$(DENO_SOURCE_DIR)\n\ntest-scripts: .header(test) $(LOCK_FILE)\n\tdeno test \\\n\t\t--unstable --coverage --allow-write --allow-read --allow-run \\\n\t\t$(LOCK_OPTIONS) \\\n\t\t$(USE_CACHE) \\\n\t\t$(IMPORT_MAP_OPTIONS) \\\n\t\tscripts\n\ntest-all: .header(test) test test-scripts\n\t$(MAKE) TARGET=test do-platform-action\n\t$(MAKE) TARGET=test do-integration-action\n\ntest-quiet: .header(test) $(LOCK_FILE)\n\tdeno test --unstable --failfast --quiet \\\n\t\t$(TEST_PERMISSIONS) \\\n\t\t$(LOCK_OPTIONS) \\\n\t\t$(USE_CACHE) \\\n\t\t$(IMPORT_MAP_OPTIONS) \\\n\t\t$(DENO_SOURCE_DIR)\n\ntest-watch: .header(test)\n\twhile inotifywait -e close_write $(DENO_APP_DIR); do make test; done\n\nupgrade:\n\t$(MAKE) --always-make RELOAD=--reload $(LOCK_FILE)\n\n.PHONY: \\\n\tall \\\n\tbuild \\\n\tclean configure \\\n\tdeno \\\n\tdo-platform-action do-integration-action \\\n\tfmt format \\\n\t.header(build) .header(clean) .header(install) .header(test) \\\n\tinstall \\\n\tlint lint-quiet \\\n\trun \\\n\tscripts/makefiles \\\n\ttest test-quiet test-scripts test-watch \\\n\t$(PLATFORMS) $(INTEGRATIONS)\n"